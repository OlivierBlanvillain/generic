package bench

import org.openjdk.jmh.annotations._
import org.openjdk.jmh.infra.Blackhole
import DataDef._

class ScanBench {
  @Benchmark def scanScalaTuple1(bh: Blackhole)   : Unit = { bh.consume(tuple1._1) }
  @Benchmark def scanArrayHList1(bh: Blackhole)   : Unit = { val i = arrayHList1.asInstanceOf[ArrayHList1[String]]; bh.consume(i.e1) }
  @Benchmark def scanLinkedHList1(bh: Blackhole)  : Unit = { val t = linkedHList1.asInstanceOf[LinkedHList1[String]]; bh.consume(t.e1) }
  @Benchmark def scanUnrolled4HList1(bh: Blackhole): Unit = { bh.consume(unrolledHList1.e1) }
  @Benchmark def scanNullHList1(bh: Blackhole)    : Unit = { val i = nullHList1.asInstanceOf[NullHListImpl]; bh.consume(i.e1) }
  @Benchmark def scanScalaTuple2(bh: Blackhole)   : Unit = { bh.consume(tuple2._1); bh.consume(tuple2._2) }
  @Benchmark def scanArrayHList2(bh: Blackhole)   : Unit = { val i = arrayHList2.asInstanceOf[ArrayHList2[String, String]]; bh.consume(i.e1); bh.consume(i.e2) }
  @Benchmark def scanLinkedHList2(bh: Blackhole)  : Unit = { val t = linkedHList2.asInstanceOf[LinkedHList2[String, String]]; bh.consume(t.e1); bh.consume(t.e2) }
  @Benchmark def scanUnrolled4HList2(bh: Blackhole): Unit = { bh.consume(unrolledHList2.e1); bh.consume(unrolledHList2.e2) }
  @Benchmark def scanNullHList2(bh: Blackhole)    : Unit = { val i = nullHList2.asInstanceOf[NullHListImpl]; bh.consume(i.e1); bh.consume(i.e2) }
  @Benchmark def scanScalaTuple3(bh: Blackhole)   : Unit = { bh.consume(tuple3._1); bh.consume(tuple3._2); bh.consume(tuple3._3) }
  @Benchmark def scanArrayHList3(bh: Blackhole)   : Unit = { val i = arrayHList3.asInstanceOf[ArrayHList3[String, String, String]]; bh.consume(i.e1); bh.consume(i.e2); bh.consume(i.e3) }
  @Benchmark def scanLinkedHList3(bh: Blackhole)  : Unit = { val t = linkedHList3.asInstanceOf[LinkedHList3[String, String, String]]; bh.consume(t.e1); bh.consume(t.e2); bh.consume(t.e3) }
  @Benchmark def scanUnrolled4HList3(bh: Blackhole): Unit = { bh.consume(unrolledHList3.e1); bh.consume(unrolledHList3.e2); bh.consume(unrolledHList3.e3) }
  @Benchmark def scanNullHList3(bh: Blackhole)    : Unit = { val i = nullHList3.asInstanceOf[NullHListImpl]; bh.consume(i.e1); bh.consume(i.e2); bh.consume(i.e3) }
  @Benchmark def scanScalaTuple4(bh: Blackhole)   : Unit = { bh.consume(tuple4._1); bh.consume(tuple4._2); bh.consume(tuple4._3); bh.consume(tuple4._4) }
  @Benchmark def scanArrayHList4(bh: Blackhole)   : Unit = { val i = arrayHList4.asInstanceOf[ArrayHList4[String, String, String, String]]; bh.consume(i.e1); bh.consume(i.e2); bh.consume(i.e3); bh.consume(i.e4) }
  @Benchmark def scanLinkedHList4(bh: Blackhole)  : Unit = { val t = linkedHList4.asInstanceOf[LinkedHList4[String, String, String, String]]; bh.consume(t.e1); bh.consume(t.e2); bh.consume(t.e3); bh.consume(t.e4) }
  @Benchmark def scanUnrolled4HList4(bh: Blackhole): Unit = { bh.consume(unrolledHList4.e1); bh.consume(unrolledHList4.e2); bh.consume(unrolledHList4.e3); bh.consume(unrolledHList4.e4) }
  @Benchmark def scanNullHList4(bh: Blackhole)    : Unit = { val i = nullHList4.asInstanceOf[NullHListImpl]; bh.consume(i.e1); bh.consume(i.e2); bh.consume(i.e3); bh.consume(i.e4) }
  @Benchmark def scanScalaTuple5(bh: Blackhole)   : Unit = { bh.consume(tuple5._1); bh.consume(tuple5._2); bh.consume(tuple5._3); bh.consume(tuple5._4); bh.consume(tuple5._5) }
  @Benchmark def scanArrayHList5(bh: Blackhole)   : Unit = { val i = arrayHList5.asInstanceOf[ArrayHListN[Any, ArrayHNil]]; bh.consume(i.underlying(0)); bh.consume(i.underlying(1)); bh.consume(i.underlying(2)); bh.consume(i.underlying(3)); bh.consume(i.underlying(4)) }
  @Benchmark def scanLinkedHList5(bh: Blackhole)  : Unit = { val t1 = linkedHList5.tail; val t = t1.asInstanceOf[LinkedHList4[String, String, String, String]]; bh.consume(linkedHList5.head); bh.consume(t.e1); bh.consume(t.e2); bh.consume(t.e3); bh.consume(t.e4) }
  @Benchmark def scanUnrolled4HList5(bh: Blackhole): Unit = { val t1 = unrolledHList5.t; bh.consume(t1.e1); bh.consume(t1.e2); bh.consume(t1.e3); bh.consume(t1.e4); bh.consume(unrolledHList5.e1) }
  @Benchmark def scanNullHList5(bh: Blackhole)    : Unit = { val i = nullHList5.asInstanceOf[NullHListImpl]; val t1 = i.t.asInstanceOf[NullHListImpl]; bh.consume(i.e1); bh.consume(t1.e1); bh.consume(t1.e2); bh.consume(t1.e3); bh.consume(t1.e4) }
  @Benchmark def scanScalaTuple6(bh: Blackhole)   : Unit = { bh.consume(tuple6._1); bh.consume(tuple6._2); bh.consume(tuple6._3); bh.consume(tuple6._4); bh.consume(tuple6._5); bh.consume(tuple6._6) }
  @Benchmark def scanArrayHList6(bh: Blackhole)   : Unit = { val i = arrayHList6.asInstanceOf[ArrayHListN[Any, ArrayHNil]]; bh.consume(i.underlying(0)); bh.consume(i.underlying(1)); bh.consume(i.underlying(2)); bh.consume(i.underlying(3)); bh.consume(i.underlying(4)); bh.consume(i.underlying(5)) }
  @Benchmark def scanLinkedHList6(bh: Blackhole)  : Unit = { val t1 = linkedHList6.tail; val t2 = t1.tail; val t = t2.asInstanceOf[LinkedHList4[String, String, String, String]]; bh.consume(linkedHList6.head); bh.consume(t1.head); bh.consume(t.e1); bh.consume(t.e2); bh.consume(t.e3); bh.consume(t.e4) }
  @Benchmark def scanUnrolled4HList6(bh: Blackhole): Unit = { val t1 = unrolledHList6.t; bh.consume(t1.e1); bh.consume(t1.e2); bh.consume(t1.e3); bh.consume(t1.e4); bh.consume(unrolledHList6.e1); bh.consume(unrolledHList6.e2) }
  @Benchmark def scanNullHList6(bh: Blackhole)    : Unit = { val i = nullHList6.asInstanceOf[NullHListImpl]; val t1 = i.t.asInstanceOf[NullHListImpl]; bh.consume(i.e1); bh.consume(i.e2); bh.consume(t1.e1); bh.consume(t1.e2); bh.consume(t1.e3); bh.consume(t1.e4) }
  @Benchmark def scanScalaTuple7(bh: Blackhole)   : Unit = { bh.consume(tuple7._1); bh.consume(tuple7._2); bh.consume(tuple7._3); bh.consume(tuple7._4); bh.consume(tuple7._5); bh.consume(tuple7._6); bh.consume(tuple7._7) }
  @Benchmark def scanArrayHList7(bh: Blackhole)   : Unit = { val i = arrayHList7.asInstanceOf[ArrayHListN[Any, ArrayHNil]]; bh.consume(i.underlying(0)); bh.consume(i.underlying(1)); bh.consume(i.underlying(2)); bh.consume(i.underlying(3)); bh.consume(i.underlying(4)); bh.consume(i.underlying(5)); bh.consume(i.underlying(6)) }
  @Benchmark def scanLinkedHList7(bh: Blackhole)  : Unit = { val t1 = linkedHList7.tail; val t2 = t1.tail; val t3 = t2.tail; val t = t3.asInstanceOf[LinkedHList4[String, String, String, String]]; bh.consume(linkedHList7.head); bh.consume(t1.head); bh.consume(t2.head); bh.consume(t.e1); bh.consume(t.e2); bh.consume(t.e3); bh.consume(t.e4) }
  @Benchmark def scanUnrolled4HList7(bh: Blackhole): Unit = { val t1 = unrolledHList7.t; bh.consume(t1.e1); bh.consume(t1.e2); bh.consume(t1.e3); bh.consume(t1.e4); bh.consume(unrolledHList7.e1); bh.consume(unrolledHList7.e2); bh.consume(unrolledHList7.e3) }
  @Benchmark def scanNullHList7(bh: Blackhole)    : Unit = { val i = nullHList7.asInstanceOf[NullHListImpl]; val t1 = i.t.asInstanceOf[NullHListImpl]; bh.consume(i.e1); bh.consume(i.e2); bh.consume(i.e3); bh.consume(t1.e1); bh.consume(t1.e2); bh.consume(t1.e3); bh.consume(t1.e4) }
  @Benchmark def scanScalaTuple8(bh: Blackhole)   : Unit = { bh.consume(tuple8._1); bh.consume(tuple8._2); bh.consume(tuple8._3); bh.consume(tuple8._4); bh.consume(tuple8._5); bh.consume(tuple8._6); bh.consume(tuple8._7); bh.consume(tuple8._8) }
  @Benchmark def scanArrayHList8(bh: Blackhole)   : Unit = { val i = arrayHList8.asInstanceOf[ArrayHListN[Any, ArrayHNil]]; bh.consume(i.underlying(0)); bh.consume(i.underlying(1)); bh.consume(i.underlying(2)); bh.consume(i.underlying(3)); bh.consume(i.underlying(4)); bh.consume(i.underlying(5)); bh.consume(i.underlying(6)); bh.consume(i.underlying(7)) }
  @Benchmark def scanLinkedHList8(bh: Blackhole)  : Unit = { val t1 = linkedHList8.tail; val t2 = t1.tail; val t3 = t2.tail; val t4 = t3.tail; val t = t4.asInstanceOf[LinkedHList4[String, String, String, String]]; bh.consume(linkedHList8.head); bh.consume(t1.head); bh.consume(t2.head); bh.consume(t3.head); bh.consume(t.e1); bh.consume(t.e2); bh.consume(t.e3); bh.consume(t.e4) }
  @Benchmark def scanUnrolled4HList8(bh: Blackhole): Unit = { val t1 = unrolledHList8.t; bh.consume(t1.e1); bh.consume(t1.e2); bh.consume(t1.e3); bh.consume(t1.e4); bh.consume(unrolledHList8.e1); bh.consume(unrolledHList8.e2); bh.consume(unrolledHList8.e3); bh.consume(unrolledHList8.e4) }
  @Benchmark def scanNullHList8(bh: Blackhole)    : Unit = { val i = nullHList8.asInstanceOf[NullHListImpl]; val t1 = i.t.asInstanceOf[NullHListImpl]; bh.consume(i.e1); bh.consume(i.e2); bh.consume(i.e3); bh.consume(i.e4); bh.consume(t1.e1); bh.consume(t1.e2); bh.consume(t1.e3); bh.consume(t1.e4) }
  @Benchmark def scanScalaTuple9(bh: Blackhole)   : Unit = { bh.consume(tuple9._1); bh.consume(tuple9._2); bh.consume(tuple9._3); bh.consume(tuple9._4); bh.consume(tuple9._5); bh.consume(tuple9._6); bh.consume(tuple9._7); bh.consume(tuple9._8); bh.consume(tuple9._9) }
  @Benchmark def scanArrayHList9(bh: Blackhole)   : Unit = { val i = arrayHList9.asInstanceOf[ArrayHListN[Any, ArrayHNil]]; bh.consume(i.underlying(0)); bh.consume(i.underlying(1)); bh.consume(i.underlying(2)); bh.consume(i.underlying(3)); bh.consume(i.underlying(4)); bh.consume(i.underlying(5)); bh.consume(i.underlying(6)); bh.consume(i.underlying(7)); bh.consume(i.underlying(8)) }
  @Benchmark def scanLinkedHList9(bh: Blackhole)  : Unit = { val t1 = linkedHList9.tail; val t2 = t1.tail; val t3 = t2.tail; val t4 = t3.tail; val t5 = t4.tail; val t = t5.asInstanceOf[LinkedHList4[String, String, String, String]]; bh.consume(linkedHList9.head); bh.consume(t1.head); bh.consume(t2.head); bh.consume(t3.head); bh.consume(t4.head); bh.consume(t.e1); bh.consume(t.e2); bh.consume(t.e3); bh.consume(t.e4) }
  @Benchmark def scanUnrolled4HList9(bh: Blackhole): Unit = { val t1 = unrolledHList9.t; val t2 = t1.t; bh.consume(t2.e1); bh.consume(t2.e2); bh.consume(t2.e3); bh.consume(t2.e4); bh.consume(t1.e1); bh.consume(t1.e2); bh.consume(t1.e3); bh.consume(t1.e4); bh.consume(unrolledHList9.e1) }
  @Benchmark def scanNullHList9(bh: Blackhole)    : Unit = { val i = nullHList9.asInstanceOf[NullHListImpl]; val t1 = i.t.asInstanceOf[NullHListImpl]; val t2 = t1.t.asInstanceOf[NullHListImpl]; bh.consume(i.e1); bh.consume(t1.e1); bh.consume(t1.e2); bh.consume(t1.e3); bh.consume(t1.e4); bh.consume(t2.e1); bh.consume(t2.e2); bh.consume(t2.e3); bh.consume(t2.e4) }
  @Benchmark def scanScalaTuple10(bh: Blackhole)   : Unit = { bh.consume(tuple10._1); bh.consume(tuple10._2); bh.consume(tuple10._3); bh.consume(tuple10._4); bh.consume(tuple10._5); bh.consume(tuple10._6); bh.consume(tuple10._7); bh.consume(tuple10._8); bh.consume(tuple10._9); bh.consume(tuple10._10) }
  @Benchmark def scanArrayHList10(bh: Blackhole)   : Unit = { val i = arrayHList10.asInstanceOf[ArrayHListN[Any, ArrayHNil]]; bh.consume(i.underlying(0)); bh.consume(i.underlying(1)); bh.consume(i.underlying(2)); bh.consume(i.underlying(3)); bh.consume(i.underlying(4)); bh.consume(i.underlying(5)); bh.consume(i.underlying(6)); bh.consume(i.underlying(7)); bh.consume(i.underlying(8)); bh.consume(i.underlying(9)) }
  @Benchmark def scanLinkedHList10(bh: Blackhole)  : Unit = { val t1 = linkedHList10.tail; val t2 = t1.tail; val t3 = t2.tail; val t4 = t3.tail; val t5 = t4.tail; val t6 = t5.tail; val t = t6.asInstanceOf[LinkedHList4[String, String, String, String]]; bh.consume(linkedHList10.head); bh.consume(t1.head); bh.consume(t2.head); bh.consume(t3.head); bh.consume(t4.head); bh.consume(t5.head); bh.consume(t.e1); bh.consume(t.e2); bh.consume(t.e3); bh.consume(t.e4) }
  @Benchmark def scanUnrolled4HList10(bh: Blackhole): Unit = { val t1 = unrolledHList10.t; val t2 = t1.t; bh.consume(t2.e1); bh.consume(t2.e2); bh.consume(t2.e3); bh.consume(t2.e4); bh.consume(t1.e1); bh.consume(t1.e2); bh.consume(t1.e3); bh.consume(t1.e4); bh.consume(unrolledHList10.e1); bh.consume(unrolledHList10.e2) }
  @Benchmark def scanNullHList10(bh: Blackhole)    : Unit = { val i = nullHList10.asInstanceOf[NullHListImpl]; val t1 = i.t.asInstanceOf[NullHListImpl]; val t2 = t1.t.asInstanceOf[NullHListImpl]; bh.consume(i.e1); bh.consume(i.e2); bh.consume(t1.e1); bh.consume(t1.e2); bh.consume(t1.e3); bh.consume(t1.e4); bh.consume(t2.e1); bh.consume(t2.e2); bh.consume(t2.e3); bh.consume(t2.e4) }
  @Benchmark def scanScalaTuple11(bh: Blackhole)   : Unit = { bh.consume(tuple11._1); bh.consume(tuple11._2); bh.consume(tuple11._3); bh.consume(tuple11._4); bh.consume(tuple11._5); bh.consume(tuple11._6); bh.consume(tuple11._7); bh.consume(tuple11._8); bh.consume(tuple11._9); bh.consume(tuple11._10); bh.consume(tuple11._11) }
  @Benchmark def scanArrayHList11(bh: Blackhole)   : Unit = { val i = arrayHList11.asInstanceOf[ArrayHListN[Any, ArrayHNil]]; bh.consume(i.underlying(0)); bh.consume(i.underlying(1)); bh.consume(i.underlying(2)); bh.consume(i.underlying(3)); bh.consume(i.underlying(4)); bh.consume(i.underlying(5)); bh.consume(i.underlying(6)); bh.consume(i.underlying(7)); bh.consume(i.underlying(8)); bh.consume(i.underlying(9)); bh.consume(i.underlying(10)) }
  @Benchmark def scanLinkedHList11(bh: Blackhole)  : Unit = { val t1 = linkedHList11.tail; val t2 = t1.tail; val t3 = t2.tail; val t4 = t3.tail; val t5 = t4.tail; val t6 = t5.tail; val t7 = t6.tail; val t = t7.asInstanceOf[LinkedHList4[String, String, String, String]]; bh.consume(linkedHList11.head); bh.consume(t1.head); bh.consume(t2.head); bh.consume(t3.head); bh.consume(t4.head); bh.consume(t5.head); bh.consume(t6.head); bh.consume(t.e1); bh.consume(t.e2); bh.consume(t.e3); bh.consume(t.e4) }
  @Benchmark def scanUnrolled4HList11(bh: Blackhole): Unit = { val t1 = unrolledHList11.t; val t2 = t1.t; bh.consume(t2.e1); bh.consume(t2.e2); bh.consume(t2.e3); bh.consume(t2.e4); bh.consume(t1.e1); bh.consume(t1.e2); bh.consume(t1.e3); bh.consume(t1.e4); bh.consume(unrolledHList11.e1); bh.consume(unrolledHList11.e2); bh.consume(unrolledHList11.e3) }
  @Benchmark def scanNullHList11(bh: Blackhole)    : Unit = { val i = nullHList11.asInstanceOf[NullHListImpl]; val t1 = i.t.asInstanceOf[NullHListImpl]; val t2 = t1.t.asInstanceOf[NullHListImpl]; bh.consume(i.e1); bh.consume(i.e2); bh.consume(i.e3); bh.consume(t1.e1); bh.consume(t1.e2); bh.consume(t1.e3); bh.consume(t1.e4); bh.consume(t2.e1); bh.consume(t2.e2); bh.consume(t2.e3); bh.consume(t2.e4) }
  @Benchmark def scanScalaTuple12(bh: Blackhole)   : Unit = { bh.consume(tuple12._1); bh.consume(tuple12._2); bh.consume(tuple12._3); bh.consume(tuple12._4); bh.consume(tuple12._5); bh.consume(tuple12._6); bh.consume(tuple12._7); bh.consume(tuple12._8); bh.consume(tuple12._9); bh.consume(tuple12._10); bh.consume(tuple12._11); bh.consume(tuple12._12) }
  @Benchmark def scanArrayHList12(bh: Blackhole)   : Unit = { val i = arrayHList12.asInstanceOf[ArrayHListN[Any, ArrayHNil]]; bh.consume(i.underlying(0)); bh.consume(i.underlying(1)); bh.consume(i.underlying(2)); bh.consume(i.underlying(3)); bh.consume(i.underlying(4)); bh.consume(i.underlying(5)); bh.consume(i.underlying(6)); bh.consume(i.underlying(7)); bh.consume(i.underlying(8)); bh.consume(i.underlying(9)); bh.consume(i.underlying(10)); bh.consume(i.underlying(11)) }
  @Benchmark def scanLinkedHList12(bh: Blackhole)  : Unit = { val t1 = linkedHList12.tail; val t2 = t1.tail; val t3 = t2.tail; val t4 = t3.tail; val t5 = t4.tail; val t6 = t5.tail; val t7 = t6.tail; val t8 = t7.tail; val t = t8.asInstanceOf[LinkedHList4[String, String, String, String]]; bh.consume(linkedHList12.head); bh.consume(t1.head); bh.consume(t2.head); bh.consume(t3.head); bh.consume(t4.head); bh.consume(t5.head); bh.consume(t6.head); bh.consume(t7.head); bh.consume(t.e1); bh.consume(t.e2); bh.consume(t.e3); bh.consume(t.e4) }
  @Benchmark def scanUnrolled4HList12(bh: Blackhole): Unit = { val t1 = unrolledHList12.t; val t2 = t1.t; bh.consume(t2.e1); bh.consume(t2.e2); bh.consume(t2.e3); bh.consume(t2.e4); bh.consume(t1.e1); bh.consume(t1.e2); bh.consume(t1.e3); bh.consume(t1.e4); bh.consume(unrolledHList12.e1); bh.consume(unrolledHList12.e2); bh.consume(unrolledHList12.e3); bh.consume(unrolledHList12.e4) }
  @Benchmark def scanNullHList12(bh: Blackhole)    : Unit = { val i = nullHList12.asInstanceOf[NullHListImpl]; val t1 = i.t.asInstanceOf[NullHListImpl]; val t2 = t1.t.asInstanceOf[NullHListImpl]; bh.consume(i.e1); bh.consume(i.e2); bh.consume(i.e3); bh.consume(i.e4); bh.consume(t1.e1); bh.consume(t1.e2); bh.consume(t1.e3); bh.consume(t1.e4); bh.consume(t2.e1); bh.consume(t2.e2); bh.consume(t2.e3); bh.consume(t2.e4) }
  @Benchmark def scanScalaTuple13(bh: Blackhole)   : Unit = { bh.consume(tuple13._1); bh.consume(tuple13._2); bh.consume(tuple13._3); bh.consume(tuple13._4); bh.consume(tuple13._5); bh.consume(tuple13._6); bh.consume(tuple13._7); bh.consume(tuple13._8); bh.consume(tuple13._9); bh.consume(tuple13._10); bh.consume(tuple13._11); bh.consume(tuple13._12); bh.consume(tuple13._13) }
  @Benchmark def scanArrayHList13(bh: Blackhole)   : Unit = { val i = arrayHList13.asInstanceOf[ArrayHListN[Any, ArrayHNil]]; bh.consume(i.underlying(0)); bh.consume(i.underlying(1)); bh.consume(i.underlying(2)); bh.consume(i.underlying(3)); bh.consume(i.underlying(4)); bh.consume(i.underlying(5)); bh.consume(i.underlying(6)); bh.consume(i.underlying(7)); bh.consume(i.underlying(8)); bh.consume(i.underlying(9)); bh.consume(i.underlying(10)); bh.consume(i.underlying(11)); bh.consume(i.underlying(12)) }
  @Benchmark def scanLinkedHList13(bh: Blackhole)  : Unit = { val t1 = linkedHList13.tail; val t2 = t1.tail; val t3 = t2.tail; val t4 = t3.tail; val t5 = t4.tail; val t6 = t5.tail; val t7 = t6.tail; val t8 = t7.tail; val t9 = t8.tail; val t = t9.asInstanceOf[LinkedHList4[String, String, String, String]]; bh.consume(linkedHList13.head); bh.consume(t1.head); bh.consume(t2.head); bh.consume(t3.head); bh.consume(t4.head); bh.consume(t5.head); bh.consume(t6.head); bh.consume(t7.head); bh.consume(t8.head); bh.consume(t.e1); bh.consume(t.e2); bh.consume(t.e3); bh.consume(t.e4) }
  @Benchmark def scanUnrolled4HList13(bh: Blackhole): Unit = { val t1 = unrolledHList13.t; val t2 = t1.t; val t3 = t2.t; bh.consume(t3.e1); bh.consume(t3.e2); bh.consume(t3.e3); bh.consume(t3.e4); bh.consume(t2.e1); bh.consume(t2.e2); bh.consume(t2.e3); bh.consume(t2.e4); bh.consume(t1.e1); bh.consume(t1.e2); bh.consume(t1.e3); bh.consume(t1.e4); bh.consume(unrolledHList13.e1) }
  @Benchmark def scanNullHList13(bh: Blackhole)    : Unit = { val i = nullHList13.asInstanceOf[NullHListImpl]; val t1 = i.t.asInstanceOf[NullHListImpl]; val t2 = t1.t.asInstanceOf[NullHListImpl]; val t3 = t2.t.asInstanceOf[NullHListImpl]; bh.consume(i.e1); bh.consume(t1.e1); bh.consume(t1.e2); bh.consume(t1.e3); bh.consume(t1.e4); bh.consume(t2.e1); bh.consume(t2.e2); bh.consume(t2.e3); bh.consume(t2.e4); bh.consume(t3.e1); bh.consume(t3.e2); bh.consume(t3.e3); bh.consume(t3.e4) }
  @Benchmark def scanScalaTuple14(bh: Blackhole)   : Unit = { bh.consume(tuple14._1); bh.consume(tuple14._2); bh.consume(tuple14._3); bh.consume(tuple14._4); bh.consume(tuple14._5); bh.consume(tuple14._6); bh.consume(tuple14._7); bh.consume(tuple14._8); bh.consume(tuple14._9); bh.consume(tuple14._10); bh.consume(tuple14._11); bh.consume(tuple14._12); bh.consume(tuple14._13); bh.consume(tuple14._14) }
  @Benchmark def scanArrayHList14(bh: Blackhole)   : Unit = { val i = arrayHList14.asInstanceOf[ArrayHListN[Any, ArrayHNil]]; bh.consume(i.underlying(0)); bh.consume(i.underlying(1)); bh.consume(i.underlying(2)); bh.consume(i.underlying(3)); bh.consume(i.underlying(4)); bh.consume(i.underlying(5)); bh.consume(i.underlying(6)); bh.consume(i.underlying(7)); bh.consume(i.underlying(8)); bh.consume(i.underlying(9)); bh.consume(i.underlying(10)); bh.consume(i.underlying(11)); bh.consume(i.underlying(12)); bh.consume(i.underlying(13)) }
  @Benchmark def scanLinkedHList14(bh: Blackhole)  : Unit = { val t1 = linkedHList14.tail; val t2 = t1.tail; val t3 = t2.tail; val t4 = t3.tail; val t5 = t4.tail; val t6 = t5.tail; val t7 = t6.tail; val t8 = t7.tail; val t9 = t8.tail; val t10 = t9.tail; val t = t10.asInstanceOf[LinkedHList4[String, String, String, String]]; bh.consume(linkedHList14.head); bh.consume(t1.head); bh.consume(t2.head); bh.consume(t3.head); bh.consume(t4.head); bh.consume(t5.head); bh.consume(t6.head); bh.consume(t7.head); bh.consume(t8.head); bh.consume(t9.head); bh.consume(t.e1); bh.consume(t.e2); bh.consume(t.e3); bh.consume(t.e4) }
  @Benchmark def scanUnrolled4HList14(bh: Blackhole): Unit = { val t1 = unrolledHList14.t; val t2 = t1.t; val t3 = t2.t; bh.consume(t3.e1); bh.consume(t3.e2); bh.consume(t3.e3); bh.consume(t3.e4); bh.consume(t2.e1); bh.consume(t2.e2); bh.consume(t2.e3); bh.consume(t2.e4); bh.consume(t1.e1); bh.consume(t1.e2); bh.consume(t1.e3); bh.consume(t1.e4); bh.consume(unrolledHList14.e1); bh.consume(unrolledHList14.e2) }
  @Benchmark def scanNullHList14(bh: Blackhole)    : Unit = { val i = nullHList14.asInstanceOf[NullHListImpl]; val t1 = i.t.asInstanceOf[NullHListImpl]; val t2 = t1.t.asInstanceOf[NullHListImpl]; val t3 = t2.t.asInstanceOf[NullHListImpl]; bh.consume(i.e1); bh.consume(i.e2); bh.consume(t1.e1); bh.consume(t1.e2); bh.consume(t1.e3); bh.consume(t1.e4); bh.consume(t2.e1); bh.consume(t2.e2); bh.consume(t2.e3); bh.consume(t2.e4); bh.consume(t3.e1); bh.consume(t3.e2); bh.consume(t3.e3); bh.consume(t3.e4) }
  @Benchmark def scanScalaTuple15(bh: Blackhole)   : Unit = { bh.consume(tuple15._1); bh.consume(tuple15._2); bh.consume(tuple15._3); bh.consume(tuple15._4); bh.consume(tuple15._5); bh.consume(tuple15._6); bh.consume(tuple15._7); bh.consume(tuple15._8); bh.consume(tuple15._9); bh.consume(tuple15._10); bh.consume(tuple15._11); bh.consume(tuple15._12); bh.consume(tuple15._13); bh.consume(tuple15._14); bh.consume(tuple15._15) }
  @Benchmark def scanArrayHList15(bh: Blackhole)   : Unit = { val i = arrayHList15.asInstanceOf[ArrayHListN[Any, ArrayHNil]]; bh.consume(i.underlying(0)); bh.consume(i.underlying(1)); bh.consume(i.underlying(2)); bh.consume(i.underlying(3)); bh.consume(i.underlying(4)); bh.consume(i.underlying(5)); bh.consume(i.underlying(6)); bh.consume(i.underlying(7)); bh.consume(i.underlying(8)); bh.consume(i.underlying(9)); bh.consume(i.underlying(10)); bh.consume(i.underlying(11)); bh.consume(i.underlying(12)); bh.consume(i.underlying(13)); bh.consume(i.underlying(14)) }
  @Benchmark def scanLinkedHList15(bh: Blackhole)  : Unit = { val t1 = linkedHList15.tail; val t2 = t1.tail; val t3 = t2.tail; val t4 = t3.tail; val t5 = t4.tail; val t6 = t5.tail; val t7 = t6.tail; val t8 = t7.tail; val t9 = t8.tail; val t10 = t9.tail; val t11 = t10.tail; val t = t11.asInstanceOf[LinkedHList4[String, String, String, String]]; bh.consume(linkedHList15.head); bh.consume(t1.head); bh.consume(t2.head); bh.consume(t3.head); bh.consume(t4.head); bh.consume(t5.head); bh.consume(t6.head); bh.consume(t7.head); bh.consume(t8.head); bh.consume(t9.head); bh.consume(t10.head); bh.consume(t.e1); bh.consume(t.e2); bh.consume(t.e3); bh.consume(t.e4) }
  @Benchmark def scanUnrolled4HList15(bh: Blackhole): Unit = { val t1 = unrolledHList15.t; val t2 = t1.t; val t3 = t2.t; bh.consume(t3.e1); bh.consume(t3.e2); bh.consume(t3.e3); bh.consume(t3.e4); bh.consume(t2.e1); bh.consume(t2.e2); bh.consume(t2.e3); bh.consume(t2.e4); bh.consume(t1.e1); bh.consume(t1.e2); bh.consume(t1.e3); bh.consume(t1.e4); bh.consume(unrolledHList15.e1); bh.consume(unrolledHList15.e2); bh.consume(unrolledHList15.e3) }
  @Benchmark def scanNullHList15(bh: Blackhole)    : Unit = { val i = nullHList15.asInstanceOf[NullHListImpl]; val t1 = i.t.asInstanceOf[NullHListImpl]; val t2 = t1.t.asInstanceOf[NullHListImpl]; val t3 = t2.t.asInstanceOf[NullHListImpl]; bh.consume(i.e1); bh.consume(i.e2); bh.consume(i.e3); bh.consume(t1.e1); bh.consume(t1.e2); bh.consume(t1.e3); bh.consume(t1.e4); bh.consume(t2.e1); bh.consume(t2.e2); bh.consume(t2.e3); bh.consume(t2.e4); bh.consume(t3.e1); bh.consume(t3.e2); bh.consume(t3.e3); bh.consume(t3.e4) }
  @Benchmark def scanScalaTuple16(bh: Blackhole)   : Unit = { bh.consume(tuple16._1); bh.consume(tuple16._2); bh.consume(tuple16._3); bh.consume(tuple16._4); bh.consume(tuple16._5); bh.consume(tuple16._6); bh.consume(tuple16._7); bh.consume(tuple16._8); bh.consume(tuple16._9); bh.consume(tuple16._10); bh.consume(tuple16._11); bh.consume(tuple16._12); bh.consume(tuple16._13); bh.consume(tuple16._14); bh.consume(tuple16._15); bh.consume(tuple16._16) }
  @Benchmark def scanArrayHList16(bh: Blackhole)   : Unit = { val i = arrayHList16.asInstanceOf[ArrayHListN[Any, ArrayHNil]]; bh.consume(i.underlying(0)); bh.consume(i.underlying(1)); bh.consume(i.underlying(2)); bh.consume(i.underlying(3)); bh.consume(i.underlying(4)); bh.consume(i.underlying(5)); bh.consume(i.underlying(6)); bh.consume(i.underlying(7)); bh.consume(i.underlying(8)); bh.consume(i.underlying(9)); bh.consume(i.underlying(10)); bh.consume(i.underlying(11)); bh.consume(i.underlying(12)); bh.consume(i.underlying(13)); bh.consume(i.underlying(14)); bh.consume(i.underlying(15)) }
  @Benchmark def scanLinkedHList16(bh: Blackhole)  : Unit = { val t1 = linkedHList16.tail; val t2 = t1.tail; val t3 = t2.tail; val t4 = t3.tail; val t5 = t4.tail; val t6 = t5.tail; val t7 = t6.tail; val t8 = t7.tail; val t9 = t8.tail; val t10 = t9.tail; val t11 = t10.tail; val t12 = t11.tail; val t = t12.asInstanceOf[LinkedHList4[String, String, String, String]]; bh.consume(linkedHList16.head); bh.consume(t1.head); bh.consume(t2.head); bh.consume(t3.head); bh.consume(t4.head); bh.consume(t5.head); bh.consume(t6.head); bh.consume(t7.head); bh.consume(t8.head); bh.consume(t9.head); bh.consume(t10.head); bh.consume(t11.head); bh.consume(t.e1); bh.consume(t.e2); bh.consume(t.e3); bh.consume(t.e4) }
  @Benchmark def scanUnrolled4HList16(bh: Blackhole): Unit = { val t1 = unrolledHList16.t; val t2 = t1.t; val t3 = t2.t; bh.consume(t3.e1); bh.consume(t3.e2); bh.consume(t3.e3); bh.consume(t3.e4); bh.consume(t2.e1); bh.consume(t2.e2); bh.consume(t2.e3); bh.consume(t2.e4); bh.consume(t1.e1); bh.consume(t1.e2); bh.consume(t1.e3); bh.consume(t1.e4); bh.consume(unrolledHList16.e1); bh.consume(unrolledHList16.e2); bh.consume(unrolledHList16.e3); bh.consume(unrolledHList16.e4) }
  @Benchmark def scanNullHList16(bh: Blackhole)    : Unit = { val i = nullHList16.asInstanceOf[NullHListImpl]; val t1 = i.t.asInstanceOf[NullHListImpl]; val t2 = t1.t.asInstanceOf[NullHListImpl]; val t3 = t2.t.asInstanceOf[NullHListImpl]; bh.consume(i.e1); bh.consume(i.e2); bh.consume(i.e3); bh.consume(i.e4); bh.consume(t1.e1); bh.consume(t1.e2); bh.consume(t1.e3); bh.consume(t1.e4); bh.consume(t2.e1); bh.consume(t2.e2); bh.consume(t2.e3); bh.consume(t2.e4); bh.consume(t3.e1); bh.consume(t3.e2); bh.consume(t3.e3); bh.consume(t3.e4) }
  @Benchmark def scanScalaTuple17(bh: Blackhole)   : Unit = { bh.consume(tuple17._1); bh.consume(tuple17._2); bh.consume(tuple17._3); bh.consume(tuple17._4); bh.consume(tuple17._5); bh.consume(tuple17._6); bh.consume(tuple17._7); bh.consume(tuple17._8); bh.consume(tuple17._9); bh.consume(tuple17._10); bh.consume(tuple17._11); bh.consume(tuple17._12); bh.consume(tuple17._13); bh.consume(tuple17._14); bh.consume(tuple17._15); bh.consume(tuple17._16); bh.consume(tuple17._17) }
  @Benchmark def scanArrayHList17(bh: Blackhole)   : Unit = { val i = arrayHList17.asInstanceOf[ArrayHListN[Any, ArrayHNil]]; bh.consume(i.underlying(0)); bh.consume(i.underlying(1)); bh.consume(i.underlying(2)); bh.consume(i.underlying(3)); bh.consume(i.underlying(4)); bh.consume(i.underlying(5)); bh.consume(i.underlying(6)); bh.consume(i.underlying(7)); bh.consume(i.underlying(8)); bh.consume(i.underlying(9)); bh.consume(i.underlying(10)); bh.consume(i.underlying(11)); bh.consume(i.underlying(12)); bh.consume(i.underlying(13)); bh.consume(i.underlying(14)); bh.consume(i.underlying(15)); bh.consume(i.underlying(16)) }
  @Benchmark def scanLinkedHList17(bh: Blackhole)  : Unit = { val t1 = linkedHList17.tail; val t2 = t1.tail; val t3 = t2.tail; val t4 = t3.tail; val t5 = t4.tail; val t6 = t5.tail; val t7 = t6.tail; val t8 = t7.tail; val t9 = t8.tail; val t10 = t9.tail; val t11 = t10.tail; val t12 = t11.tail; val t13 = t12.tail; val t = t13.asInstanceOf[LinkedHList4[String, String, String, String]]; bh.consume(linkedHList17.head); bh.consume(t1.head); bh.consume(t2.head); bh.consume(t3.head); bh.consume(t4.head); bh.consume(t5.head); bh.consume(t6.head); bh.consume(t7.head); bh.consume(t8.head); bh.consume(t9.head); bh.consume(t10.head); bh.consume(t11.head); bh.consume(t12.head); bh.consume(t.e1); bh.consume(t.e2); bh.consume(t.e3); bh.consume(t.e4) }
  @Benchmark def scanUnrolled4HList17(bh: Blackhole): Unit = { val t1 = unrolledHList17.t; val t2 = t1.t; val t3 = t2.t; val t4 = t3.t; bh.consume(t4.e1); bh.consume(t4.e2); bh.consume(t4.e3); bh.consume(t4.e4); bh.consume(t3.e1); bh.consume(t3.e2); bh.consume(t3.e3); bh.consume(t3.e4); bh.consume(t2.e1); bh.consume(t2.e2); bh.consume(t2.e3); bh.consume(t2.e4); bh.consume(t1.e1); bh.consume(t1.e2); bh.consume(t1.e3); bh.consume(t1.e4); bh.consume(unrolledHList17.e1) }
  @Benchmark def scanNullHList17(bh: Blackhole)    : Unit = { val i = nullHList17.asInstanceOf[NullHListImpl]; val t1 = i.t.asInstanceOf[NullHListImpl]; val t2 = t1.t.asInstanceOf[NullHListImpl]; val t3 = t2.t.asInstanceOf[NullHListImpl]; val t4 = t3.t.asInstanceOf[NullHListImpl]; bh.consume(i.e1); bh.consume(t1.e1); bh.consume(t1.e2); bh.consume(t1.e3); bh.consume(t1.e4); bh.consume(t2.e1); bh.consume(t2.e2); bh.consume(t2.e3); bh.consume(t2.e4); bh.consume(t3.e1); bh.consume(t3.e2); bh.consume(t3.e3); bh.consume(t3.e4); bh.consume(t4.e1); bh.consume(t4.e2); bh.consume(t4.e3); bh.consume(t4.e4) }
  @Benchmark def scanScalaTuple18(bh: Blackhole)   : Unit = { bh.consume(tuple18._1); bh.consume(tuple18._2); bh.consume(tuple18._3); bh.consume(tuple18._4); bh.consume(tuple18._5); bh.consume(tuple18._6); bh.consume(tuple18._7); bh.consume(tuple18._8); bh.consume(tuple18._9); bh.consume(tuple18._10); bh.consume(tuple18._11); bh.consume(tuple18._12); bh.consume(tuple18._13); bh.consume(tuple18._14); bh.consume(tuple18._15); bh.consume(tuple18._16); bh.consume(tuple18._17); bh.consume(tuple18._18) }
  @Benchmark def scanArrayHList18(bh: Blackhole)   : Unit = { val i = arrayHList18.asInstanceOf[ArrayHListN[Any, ArrayHNil]]; bh.consume(i.underlying(0)); bh.consume(i.underlying(1)); bh.consume(i.underlying(2)); bh.consume(i.underlying(3)); bh.consume(i.underlying(4)); bh.consume(i.underlying(5)); bh.consume(i.underlying(6)); bh.consume(i.underlying(7)); bh.consume(i.underlying(8)); bh.consume(i.underlying(9)); bh.consume(i.underlying(10)); bh.consume(i.underlying(11)); bh.consume(i.underlying(12)); bh.consume(i.underlying(13)); bh.consume(i.underlying(14)); bh.consume(i.underlying(15)); bh.consume(i.underlying(16)); bh.consume(i.underlying(17)) }
  @Benchmark def scanLinkedHList18(bh: Blackhole)  : Unit = { val t1 = linkedHList18.tail; val t2 = t1.tail; val t3 = t2.tail; val t4 = t3.tail; val t5 = t4.tail; val t6 = t5.tail; val t7 = t6.tail; val t8 = t7.tail; val t9 = t8.tail; val t10 = t9.tail; val t11 = t10.tail; val t12 = t11.tail; val t13 = t12.tail; val t14 = t13.tail; val t = t14.asInstanceOf[LinkedHList4[String, String, String, String]]; bh.consume(linkedHList18.head); bh.consume(t1.head); bh.consume(t2.head); bh.consume(t3.head); bh.consume(t4.head); bh.consume(t5.head); bh.consume(t6.head); bh.consume(t7.head); bh.consume(t8.head); bh.consume(t9.head); bh.consume(t10.head); bh.consume(t11.head); bh.consume(t12.head); bh.consume(t13.head); bh.consume(t.e1); bh.consume(t.e2); bh.consume(t.e3); bh.consume(t.e4) }
  @Benchmark def scanUnrolled4HList18(bh: Blackhole): Unit = { val t1 = unrolledHList18.t; val t2 = t1.t; val t3 = t2.t; val t4 = t3.t; bh.consume(t4.e1); bh.consume(t4.e2); bh.consume(t4.e3); bh.consume(t4.e4); bh.consume(t3.e1); bh.consume(t3.e2); bh.consume(t3.e3); bh.consume(t3.e4); bh.consume(t2.e1); bh.consume(t2.e2); bh.consume(t2.e3); bh.consume(t2.e4); bh.consume(t1.e1); bh.consume(t1.e2); bh.consume(t1.e3); bh.consume(t1.e4); bh.consume(unrolledHList18.e1); bh.consume(unrolledHList18.e2) }
  @Benchmark def scanNullHList18(bh: Blackhole)    : Unit = { val i = nullHList18.asInstanceOf[NullHListImpl]; val t1 = i.t.asInstanceOf[NullHListImpl]; val t2 = t1.t.asInstanceOf[NullHListImpl]; val t3 = t2.t.asInstanceOf[NullHListImpl]; val t4 = t3.t.asInstanceOf[NullHListImpl]; bh.consume(i.e1); bh.consume(i.e2); bh.consume(t1.e1); bh.consume(t1.e2); bh.consume(t1.e3); bh.consume(t1.e4); bh.consume(t2.e1); bh.consume(t2.e2); bh.consume(t2.e3); bh.consume(t2.e4); bh.consume(t3.e1); bh.consume(t3.e2); bh.consume(t3.e3); bh.consume(t3.e4); bh.consume(t4.e1); bh.consume(t4.e2); bh.consume(t4.e3); bh.consume(t4.e4) }
  @Benchmark def scanScalaTuple19(bh: Blackhole)   : Unit = { bh.consume(tuple19._1); bh.consume(tuple19._2); bh.consume(tuple19._3); bh.consume(tuple19._4); bh.consume(tuple19._5); bh.consume(tuple19._6); bh.consume(tuple19._7); bh.consume(tuple19._8); bh.consume(tuple19._9); bh.consume(tuple19._10); bh.consume(tuple19._11); bh.consume(tuple19._12); bh.consume(tuple19._13); bh.consume(tuple19._14); bh.consume(tuple19._15); bh.consume(tuple19._16); bh.consume(tuple19._17); bh.consume(tuple19._18); bh.consume(tuple19._19) }
  @Benchmark def scanArrayHList19(bh: Blackhole)   : Unit = { val i = arrayHList19.asInstanceOf[ArrayHListN[Any, ArrayHNil]]; bh.consume(i.underlying(0)); bh.consume(i.underlying(1)); bh.consume(i.underlying(2)); bh.consume(i.underlying(3)); bh.consume(i.underlying(4)); bh.consume(i.underlying(5)); bh.consume(i.underlying(6)); bh.consume(i.underlying(7)); bh.consume(i.underlying(8)); bh.consume(i.underlying(9)); bh.consume(i.underlying(10)); bh.consume(i.underlying(11)); bh.consume(i.underlying(12)); bh.consume(i.underlying(13)); bh.consume(i.underlying(14)); bh.consume(i.underlying(15)); bh.consume(i.underlying(16)); bh.consume(i.underlying(17)); bh.consume(i.underlying(18)) }
  @Benchmark def scanLinkedHList19(bh: Blackhole)  : Unit = { val t1 = linkedHList19.tail; val t2 = t1.tail; val t3 = t2.tail; val t4 = t3.tail; val t5 = t4.tail; val t6 = t5.tail; val t7 = t6.tail; val t8 = t7.tail; val t9 = t8.tail; val t10 = t9.tail; val t11 = t10.tail; val t12 = t11.tail; val t13 = t12.tail; val t14 = t13.tail; val t15 = t14.tail; val t = t15.asInstanceOf[LinkedHList4[String, String, String, String]]; bh.consume(linkedHList19.head); bh.consume(t1.head); bh.consume(t2.head); bh.consume(t3.head); bh.consume(t4.head); bh.consume(t5.head); bh.consume(t6.head); bh.consume(t7.head); bh.consume(t8.head); bh.consume(t9.head); bh.consume(t10.head); bh.consume(t11.head); bh.consume(t12.head); bh.consume(t13.head); bh.consume(t14.head); bh.consume(t.e1); bh.consume(t.e2); bh.consume(t.e3); bh.consume(t.e4) }
  @Benchmark def scanUnrolled4HList19(bh: Blackhole): Unit = { val t1 = unrolledHList19.t; val t2 = t1.t; val t3 = t2.t; val t4 = t3.t; bh.consume(t4.e1); bh.consume(t4.e2); bh.consume(t4.e3); bh.consume(t4.e4); bh.consume(t3.e1); bh.consume(t3.e2); bh.consume(t3.e3); bh.consume(t3.e4); bh.consume(t2.e1); bh.consume(t2.e2); bh.consume(t2.e3); bh.consume(t2.e4); bh.consume(t1.e1); bh.consume(t1.e2); bh.consume(t1.e3); bh.consume(t1.e4); bh.consume(unrolledHList19.e1); bh.consume(unrolledHList19.e2); bh.consume(unrolledHList19.e3) }
  @Benchmark def scanNullHList19(bh: Blackhole)    : Unit = { val i = nullHList19.asInstanceOf[NullHListImpl]; val t1 = i.t.asInstanceOf[NullHListImpl]; val t2 = t1.t.asInstanceOf[NullHListImpl]; val t3 = t2.t.asInstanceOf[NullHListImpl]; val t4 = t3.t.asInstanceOf[NullHListImpl]; bh.consume(i.e1); bh.consume(i.e2); bh.consume(i.e3); bh.consume(t1.e1); bh.consume(t1.e2); bh.consume(t1.e3); bh.consume(t1.e4); bh.consume(t2.e1); bh.consume(t2.e2); bh.consume(t2.e3); bh.consume(t2.e4); bh.consume(t3.e1); bh.consume(t3.e2); bh.consume(t3.e3); bh.consume(t3.e4); bh.consume(t4.e1); bh.consume(t4.e2); bh.consume(t4.e3); bh.consume(t4.e4) }
  @Benchmark def scanScalaTuple20(bh: Blackhole)   : Unit = { bh.consume(tuple20._1); bh.consume(tuple20._2); bh.consume(tuple20._3); bh.consume(tuple20._4); bh.consume(tuple20._5); bh.consume(tuple20._6); bh.consume(tuple20._7); bh.consume(tuple20._8); bh.consume(tuple20._9); bh.consume(tuple20._10); bh.consume(tuple20._11); bh.consume(tuple20._12); bh.consume(tuple20._13); bh.consume(tuple20._14); bh.consume(tuple20._15); bh.consume(tuple20._16); bh.consume(tuple20._17); bh.consume(tuple20._18); bh.consume(tuple20._19); bh.consume(tuple20._20) }
  @Benchmark def scanArrayHList20(bh: Blackhole)   : Unit = { val i = arrayHList20.asInstanceOf[ArrayHListN[Any, ArrayHNil]]; bh.consume(i.underlying(0)); bh.consume(i.underlying(1)); bh.consume(i.underlying(2)); bh.consume(i.underlying(3)); bh.consume(i.underlying(4)); bh.consume(i.underlying(5)); bh.consume(i.underlying(6)); bh.consume(i.underlying(7)); bh.consume(i.underlying(8)); bh.consume(i.underlying(9)); bh.consume(i.underlying(10)); bh.consume(i.underlying(11)); bh.consume(i.underlying(12)); bh.consume(i.underlying(13)); bh.consume(i.underlying(14)); bh.consume(i.underlying(15)); bh.consume(i.underlying(16)); bh.consume(i.underlying(17)); bh.consume(i.underlying(18)); bh.consume(i.underlying(19)) }
  @Benchmark def scanLinkedHList20(bh: Blackhole)  : Unit = { val t1 = linkedHList20.tail; val t2 = t1.tail; val t3 = t2.tail; val t4 = t3.tail; val t5 = t4.tail; val t6 = t5.tail; val t7 = t6.tail; val t8 = t7.tail; val t9 = t8.tail; val t10 = t9.tail; val t11 = t10.tail; val t12 = t11.tail; val t13 = t12.tail; val t14 = t13.tail; val t15 = t14.tail; val t16 = t15.tail; val t = t16.asInstanceOf[LinkedHList4[String, String, String, String]]; bh.consume(linkedHList20.head); bh.consume(t1.head); bh.consume(t2.head); bh.consume(t3.head); bh.consume(t4.head); bh.consume(t5.head); bh.consume(t6.head); bh.consume(t7.head); bh.consume(t8.head); bh.consume(t9.head); bh.consume(t10.head); bh.consume(t11.head); bh.consume(t12.head); bh.consume(t13.head); bh.consume(t14.head); bh.consume(t15.head); bh.consume(t.e1); bh.consume(t.e2); bh.consume(t.e3); bh.consume(t.e4) }
  @Benchmark def scanUnrolled4HList20(bh: Blackhole): Unit = { val t1 = unrolledHList20.t; val t2 = t1.t; val t3 = t2.t; val t4 = t3.t; bh.consume(t4.e1); bh.consume(t4.e2); bh.consume(t4.e3); bh.consume(t4.e4); bh.consume(t3.e1); bh.consume(t3.e2); bh.consume(t3.e3); bh.consume(t3.e4); bh.consume(t2.e1); bh.consume(t2.e2); bh.consume(t2.e3); bh.consume(t2.e4); bh.consume(t1.e1); bh.consume(t1.e2); bh.consume(t1.e3); bh.consume(t1.e4); bh.consume(unrolledHList20.e1); bh.consume(unrolledHList20.e2); bh.consume(unrolledHList20.e3); bh.consume(unrolledHList20.e4) }
  @Benchmark def scanNullHList20(bh: Blackhole)    : Unit = { val i = nullHList20.asInstanceOf[NullHListImpl]; val t1 = i.t.asInstanceOf[NullHListImpl]; val t2 = t1.t.asInstanceOf[NullHListImpl]; val t3 = t2.t.asInstanceOf[NullHListImpl]; val t4 = t3.t.asInstanceOf[NullHListImpl]; bh.consume(i.e1); bh.consume(i.e2); bh.consume(i.e3); bh.consume(i.e4); bh.consume(t1.e1); bh.consume(t1.e2); bh.consume(t1.e3); bh.consume(t1.e4); bh.consume(t2.e1); bh.consume(t2.e2); bh.consume(t2.e3); bh.consume(t2.e4); bh.consume(t3.e1); bh.consume(t3.e2); bh.consume(t3.e3); bh.consume(t3.e4); bh.consume(t4.e1); bh.consume(t4.e2); bh.consume(t4.e3); bh.consume(t4.e4) }
  @Benchmark def scanScalaTuple21(bh: Blackhole)   : Unit = { bh.consume(tuple21._1); bh.consume(tuple21._2); bh.consume(tuple21._3); bh.consume(tuple21._4); bh.consume(tuple21._5); bh.consume(tuple21._6); bh.consume(tuple21._7); bh.consume(tuple21._8); bh.consume(tuple21._9); bh.consume(tuple21._10); bh.consume(tuple21._11); bh.consume(tuple21._12); bh.consume(tuple21._13); bh.consume(tuple21._14); bh.consume(tuple21._15); bh.consume(tuple21._16); bh.consume(tuple21._17); bh.consume(tuple21._18); bh.consume(tuple21._19); bh.consume(tuple21._20); bh.consume(tuple21._21) }
  @Benchmark def scanArrayHList21(bh: Blackhole)   : Unit = { val i = arrayHList21.asInstanceOf[ArrayHListN[Any, ArrayHNil]]; bh.consume(i.underlying(0)); bh.consume(i.underlying(1)); bh.consume(i.underlying(2)); bh.consume(i.underlying(3)); bh.consume(i.underlying(4)); bh.consume(i.underlying(5)); bh.consume(i.underlying(6)); bh.consume(i.underlying(7)); bh.consume(i.underlying(8)); bh.consume(i.underlying(9)); bh.consume(i.underlying(10)); bh.consume(i.underlying(11)); bh.consume(i.underlying(12)); bh.consume(i.underlying(13)); bh.consume(i.underlying(14)); bh.consume(i.underlying(15)); bh.consume(i.underlying(16)); bh.consume(i.underlying(17)); bh.consume(i.underlying(18)); bh.consume(i.underlying(19)); bh.consume(i.underlying(20)) }
  @Benchmark def scanLinkedHList21(bh: Blackhole)  : Unit = { val t1 = linkedHList21.tail; val t2 = t1.tail; val t3 = t2.tail; val t4 = t3.tail; val t5 = t4.tail; val t6 = t5.tail; val t7 = t6.tail; val t8 = t7.tail; val t9 = t8.tail; val t10 = t9.tail; val t11 = t10.tail; val t12 = t11.tail; val t13 = t12.tail; val t14 = t13.tail; val t15 = t14.tail; val t16 = t15.tail; val t17 = t16.tail; val t = t17.asInstanceOf[LinkedHList4[String, String, String, String]]; bh.consume(linkedHList21.head); bh.consume(t1.head); bh.consume(t2.head); bh.consume(t3.head); bh.consume(t4.head); bh.consume(t5.head); bh.consume(t6.head); bh.consume(t7.head); bh.consume(t8.head); bh.consume(t9.head); bh.consume(t10.head); bh.consume(t11.head); bh.consume(t12.head); bh.consume(t13.head); bh.consume(t14.head); bh.consume(t15.head); bh.consume(t16.head); bh.consume(t.e1); bh.consume(t.e2); bh.consume(t.e3); bh.consume(t.e4) }
  @Benchmark def scanUnrolled4HList21(bh: Blackhole): Unit = { val t1 = unrolledHList21.t; val t2 = t1.t; val t3 = t2.t; val t4 = t3.t; val t5 = t4.t; bh.consume(t5.e1); bh.consume(t5.e2); bh.consume(t5.e3); bh.consume(t5.e4); bh.consume(t4.e1); bh.consume(t4.e2); bh.consume(t4.e3); bh.consume(t4.e4); bh.consume(t3.e1); bh.consume(t3.e2); bh.consume(t3.e3); bh.consume(t3.e4); bh.consume(t2.e1); bh.consume(t2.e2); bh.consume(t2.e3); bh.consume(t2.e4); bh.consume(t1.e1); bh.consume(t1.e2); bh.consume(t1.e3); bh.consume(t1.e4); bh.consume(unrolledHList21.e1) }
  @Benchmark def scanNullHList21(bh: Blackhole)    : Unit = { val i = nullHList21.asInstanceOf[NullHListImpl]; val t1 = i.t.asInstanceOf[NullHListImpl]; val t2 = t1.t.asInstanceOf[NullHListImpl]; val t3 = t2.t.asInstanceOf[NullHListImpl]; val t4 = t3.t.asInstanceOf[NullHListImpl]; val t5 = t4.t.asInstanceOf[NullHListImpl]; bh.consume(i.e1); bh.consume(t1.e1); bh.consume(t1.e2); bh.consume(t1.e3); bh.consume(t1.e4); bh.consume(t2.e1); bh.consume(t2.e2); bh.consume(t2.e3); bh.consume(t2.e4); bh.consume(t3.e1); bh.consume(t3.e2); bh.consume(t3.e3); bh.consume(t3.e4); bh.consume(t4.e1); bh.consume(t4.e2); bh.consume(t4.e3); bh.consume(t4.e4); bh.consume(t5.e1); bh.consume(t5.e2); bh.consume(t5.e3); bh.consume(t5.e4) }
}