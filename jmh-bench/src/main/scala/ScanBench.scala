package bench

import org.openjdk.jmh.annotations._
import org.openjdk.jmh.infra.Blackhole
import DataDef._

class ScanBench {
  @Benchmark def scanScalaTuple1(bh: Blackhole)   : Unit = { bh.consume(tuple1._1) }
  @Benchmark def scanArrayHList1(bh: Blackhole)   : Unit = { val i = arrayHList1.asInstanceOf[ArrayHList1[Int]]; bh.consume(i.e1) }
  @Benchmark def scanLinkedHList1(bh: Blackhole)  : Unit = { linkedHList1.head }
  @Benchmark def scanUnrolledHList1(bh: Blackhole): Unit = { bh.consume(unrolledHList1.e1) }
  @Benchmark def scanNullHList1(bh: Blackhole)    : Unit = { val i = nullHList1.asInstanceOf[NullHListImpl]; bh.consume(i.e1) }
  @Benchmark def scanScalaTuple2(bh: Blackhole)   : Unit = { bh.consume(tuple2._1); bh.consume(tuple2._2) }
  @Benchmark def scanArrayHList2(bh: Blackhole)   : Unit = { val i = arrayHList2.asInstanceOf[ArrayHList2[Int, Int]]; bh.consume(i.e1); bh.consume(i.e2) }
  @Benchmark def scanLinkedHList2(bh: Blackhole)  : Unit = { val t1 = linkedHList2.tail; linkedHList2.head; bh.consume(t1.head) }
  @Benchmark def scanUnrolledHList2(bh: Blackhole): Unit = { bh.consume(unrolledHList2.e1); bh.consume(unrolledHList2.e2) }
  @Benchmark def scanNullHList2(bh: Blackhole)    : Unit = { val i = nullHList2.asInstanceOf[NullHListImpl]; bh.consume(i.e1); bh.consume(i.e2) }
  @Benchmark def scanScalaTuple3(bh: Blackhole)   : Unit = { bh.consume(tuple3._1); bh.consume(tuple3._2); bh.consume(tuple3._3) }
  @Benchmark def scanArrayHList3(bh: Blackhole)   : Unit = { val i = arrayHList3.asInstanceOf[ArrayHList3[Int, Int, Int]]; bh.consume(i.e1); bh.consume(i.e2); bh.consume(i.e3) }
  @Benchmark def scanLinkedHList3(bh: Blackhole)  : Unit = { val t1 = linkedHList3.tail; val t2 = t1.tail; linkedHList3.head; bh.consume(t1.head); bh.consume(t2.head) }
  @Benchmark def scanUnrolledHList3(bh: Blackhole): Unit = { bh.consume(unrolledHList3.e1); bh.consume(unrolledHList3.e2); bh.consume(unrolledHList3.e3) }
  @Benchmark def scanNullHList3(bh: Blackhole)    : Unit = { val i = nullHList3.asInstanceOf[NullHListImpl]; bh.consume(i.e1); bh.consume(i.e2); bh.consume(i.e3) }
  @Benchmark def scanScalaTuple4(bh: Blackhole)   : Unit = { bh.consume(tuple4._1); bh.consume(tuple4._2); bh.consume(tuple4._3); bh.consume(tuple4._4) }
  @Benchmark def scanArrayHList4(bh: Blackhole)   : Unit = { val i = arrayHList4.asInstanceOf[ArrayHList4[Int, Int, Int, Int]]; bh.consume(i.e1); bh.consume(i.e2); bh.consume(i.e3); bh.consume(i.e4) }
  @Benchmark def scanLinkedHList4(bh: Blackhole)  : Unit = { val t1 = linkedHList4.tail; val t2 = t1.tail; val t3 = t2.tail; linkedHList4.head; bh.consume(t1.head); bh.consume(t2.head); bh.consume(t3.head) }
  @Benchmark def scanUnrolledHList4(bh: Blackhole): Unit = { bh.consume(unrolledHList4.e1); bh.consume(unrolledHList4.e2); bh.consume(unrolledHList4.e3); bh.consume(unrolledHList4.e4) }
  @Benchmark def scanNullHList4(bh: Blackhole)    : Unit = { val i = nullHList4.asInstanceOf[NullHListImpl]; bh.consume(i.e1); bh.consume(i.e2); bh.consume(i.e3); bh.consume(i.e4) }
  @Benchmark def scanScalaTuple5(bh: Blackhole)   : Unit = { bh.consume(tuple5._1); bh.consume(tuple5._2); bh.consume(tuple5._3); bh.consume(tuple5._4); bh.consume(tuple5._5) }
  @Benchmark def scanArrayHList5(bh: Blackhole)   : Unit = { val i = arrayHList5.asInstanceOf[ArrayHListN[Any, ArrayHNil]]; bh.consume(i.underlying(0)); bh.consume(i.underlying(1)); bh.consume(i.underlying(2)); bh.consume(i.underlying(3)); bh.consume(i.underlying(4)) }
  @Benchmark def scanLinkedHList5(bh: Blackhole)  : Unit = { val t1 = linkedHList5.tail; val t2 = t1.tail; val t3 = t2.tail; val t4 = t3.tail; linkedHList5.head; bh.consume(t1.head); bh.consume(t2.head); bh.consume(t3.head); bh.consume(t4.head) }
  @Benchmark def scanUnrolledHList5(bh: Blackhole): Unit = { val t1 = unrolledHList5.t; bh.consume(t1.e1); bh.consume(t1.e2); bh.consume(t1.e3); bh.consume(t1.e4); bh.consume(unrolledHList5.e1) }
  @Benchmark def scanNullHList5(bh: Blackhole)    : Unit = { val i = nullHList5.asInstanceOf[NullHListImpl]; val t1 = i.t.asInstanceOf[NullHListImpl]; bh.consume(i.e1); bh.consume(List(t1.e1, t1.e2, t1.e3, t1.e4)) }
  @Benchmark def scanScalaTuple6(bh: Blackhole)   : Unit = { bh.consume(tuple6._1); bh.consume(tuple6._2); bh.consume(tuple6._3); bh.consume(tuple6._4); bh.consume(tuple6._5); bh.consume(tuple6._6) }
  @Benchmark def scanArrayHList6(bh: Blackhole)   : Unit = { val i = arrayHList6.asInstanceOf[ArrayHListN[Any, ArrayHNil]]; bh.consume(i.underlying(0)); bh.consume(i.underlying(1)); bh.consume(i.underlying(2)); bh.consume(i.underlying(3)); bh.consume(i.underlying(4)); bh.consume(i.underlying(5)) }
  @Benchmark def scanLinkedHList6(bh: Blackhole)  : Unit = { val t1 = linkedHList6.tail; val t2 = t1.tail; val t3 = t2.tail; val t4 = t3.tail; val t5 = t4.tail; linkedHList6.head; bh.consume(t1.head); bh.consume(t2.head); bh.consume(t3.head); bh.consume(t4.head); bh.consume(t5.head) }
  @Benchmark def scanUnrolledHList6(bh: Blackhole): Unit = { val t1 = unrolledHList6.t; bh.consume(t1.e1); bh.consume(t1.e2); bh.consume(t1.e3); bh.consume(t1.e4); bh.consume(unrolledHList6.e1); bh.consume(unrolledHList6.e2) }
  @Benchmark def scanNullHList6(bh: Blackhole)    : Unit = { val i = nullHList6.asInstanceOf[NullHListImpl]; val t1 = i.t.asInstanceOf[NullHListImpl]; bh.consume(i.e1); bh.consume(i.e2); bh.consume(List(t1.e1, t1.e2, t1.e3, t1.e4)) }
  @Benchmark def scanScalaTuple7(bh: Blackhole)   : Unit = { bh.consume(tuple7._1); bh.consume(tuple7._2); bh.consume(tuple7._3); bh.consume(tuple7._4); bh.consume(tuple7._5); bh.consume(tuple7._6); bh.consume(tuple7._7) }
  @Benchmark def scanArrayHList7(bh: Blackhole)   : Unit = { val i = arrayHList7.asInstanceOf[ArrayHListN[Any, ArrayHNil]]; bh.consume(i.underlying(0)); bh.consume(i.underlying(1)); bh.consume(i.underlying(2)); bh.consume(i.underlying(3)); bh.consume(i.underlying(4)); bh.consume(i.underlying(5)); bh.consume(i.underlying(6)) }
  @Benchmark def scanLinkedHList7(bh: Blackhole)  : Unit = { val t1 = linkedHList7.tail; val t2 = t1.tail; val t3 = t2.tail; val t4 = t3.tail; val t5 = t4.tail; val t6 = t5.tail; linkedHList7.head; bh.consume(t1.head); bh.consume(t2.head); bh.consume(t3.head); bh.consume(t4.head); bh.consume(t5.head); bh.consume(t6.head) }
  @Benchmark def scanUnrolledHList7(bh: Blackhole): Unit = { val t1 = unrolledHList7.t; bh.consume(t1.e1); bh.consume(t1.e2); bh.consume(t1.e3); bh.consume(t1.e4); bh.consume(unrolledHList7.e1); bh.consume(unrolledHList7.e2); bh.consume(unrolledHList7.e3) }
  @Benchmark def scanNullHList7(bh: Blackhole)    : Unit = { val i = nullHList7.asInstanceOf[NullHListImpl]; val t1 = i.t.asInstanceOf[NullHListImpl]; bh.consume(i.e1); bh.consume(i.e2); bh.consume(i.e3); bh.consume(List(t1.e1, t1.e2, t1.e3, t1.e4)) }
  @Benchmark def scanScalaTuple8(bh: Blackhole)   : Unit = { bh.consume(tuple8._1); bh.consume(tuple8._2); bh.consume(tuple8._3); bh.consume(tuple8._4); bh.consume(tuple8._5); bh.consume(tuple8._6); bh.consume(tuple8._7); bh.consume(tuple8._8) }
  @Benchmark def scanArrayHList8(bh: Blackhole)   : Unit = { val i = arrayHList8.asInstanceOf[ArrayHListN[Any, ArrayHNil]]; bh.consume(i.underlying(0)); bh.consume(i.underlying(1)); bh.consume(i.underlying(2)); bh.consume(i.underlying(3)); bh.consume(i.underlying(4)); bh.consume(i.underlying(5)); bh.consume(i.underlying(6)); bh.consume(i.underlying(7)) }
  @Benchmark def scanLinkedHList8(bh: Blackhole)  : Unit = { val t1 = linkedHList8.tail; val t2 = t1.tail; val t3 = t2.tail; val t4 = t3.tail; val t5 = t4.tail; val t6 = t5.tail; val t7 = t6.tail; linkedHList8.head; bh.consume(t1.head); bh.consume(t2.head); bh.consume(t3.head); bh.consume(t4.head); bh.consume(t5.head); bh.consume(t6.head); bh.consume(t7.head) }
  @Benchmark def scanUnrolledHList8(bh: Blackhole): Unit = { val t1 = unrolledHList8.t; bh.consume(t1.e1); bh.consume(t1.e2); bh.consume(t1.e3); bh.consume(t1.e4); bh.consume(unrolledHList8.e1); bh.consume(unrolledHList8.e2); bh.consume(unrolledHList8.e3); bh.consume(unrolledHList8.e4) }
  @Benchmark def scanNullHList8(bh: Blackhole)    : Unit = { val i = nullHList8.asInstanceOf[NullHListImpl]; val t1 = i.t.asInstanceOf[NullHListImpl]; bh.consume(i.e1); bh.consume(i.e2); bh.consume(i.e3); bh.consume(i.e4); bh.consume(List(t1.e1, t1.e2, t1.e3, t1.e4)) }
  @Benchmark def scanScalaTuple9(bh: Blackhole)   : Unit = { bh.consume(tuple9._1); bh.consume(tuple9._2); bh.consume(tuple9._3); bh.consume(tuple9._4); bh.consume(tuple9._5); bh.consume(tuple9._6); bh.consume(tuple9._7); bh.consume(tuple9._8); bh.consume(tuple9._9) }
  @Benchmark def scanArrayHList9(bh: Blackhole)   : Unit = { val i = arrayHList9.asInstanceOf[ArrayHListN[Any, ArrayHNil]]; bh.consume(i.underlying(0)); bh.consume(i.underlying(1)); bh.consume(i.underlying(2)); bh.consume(i.underlying(3)); bh.consume(i.underlying(4)); bh.consume(i.underlying(5)); bh.consume(i.underlying(6)); bh.consume(i.underlying(7)); bh.consume(i.underlying(8)) }
  @Benchmark def scanLinkedHList9(bh: Blackhole)  : Unit = { val t1 = linkedHList9.tail; val t2 = t1.tail; val t3 = t2.tail; val t4 = t3.tail; val t5 = t4.tail; val t6 = t5.tail; val t7 = t6.tail; val t8 = t7.tail; linkedHList9.head; bh.consume(t1.head); bh.consume(t2.head); bh.consume(t3.head); bh.consume(t4.head); bh.consume(t5.head); bh.consume(t6.head); bh.consume(t7.head); bh.consume(t8.head) }
  @Benchmark def scanUnrolledHList9(bh: Blackhole): Unit = { val t1 = unrolledHList9.t; val t2 = t1.t; bh.consume(t2.e1); bh.consume(t2.e2); bh.consume(t2.e3); bh.consume(t2.e4); bh.consume(t1.e1); bh.consume(t1.e2); bh.consume(t1.e3); bh.consume(t1.e4); bh.consume(unrolledHList9.e1) }
  @Benchmark def scanNullHList9(bh: Blackhole)    : Unit = { val i = nullHList9.asInstanceOf[NullHListImpl]; val t1 = i.t.asInstanceOf[NullHListImpl]; val t2 = t1.t.asInstanceOf[NullHListImpl]; bh.consume(i.e1); bh.consume(List(t1.e1, t1.e2, t1.e3, t1.e4)); bh.consume(List(t2.e1, t2.e2, t2.e3, t2.e4)) }
  @Benchmark def scanScalaTuple10(bh: Blackhole)   : Unit = { bh.consume(tuple10._1); bh.consume(tuple10._2); bh.consume(tuple10._3); bh.consume(tuple10._4); bh.consume(tuple10._5); bh.consume(tuple10._6); bh.consume(tuple10._7); bh.consume(tuple10._8); bh.consume(tuple10._9); bh.consume(tuple10._10) }
  @Benchmark def scanArrayHList10(bh: Blackhole)   : Unit = { val i = arrayHList10.asInstanceOf[ArrayHListN[Any, ArrayHNil]]; bh.consume(i.underlying(0)); bh.consume(i.underlying(1)); bh.consume(i.underlying(2)); bh.consume(i.underlying(3)); bh.consume(i.underlying(4)); bh.consume(i.underlying(5)); bh.consume(i.underlying(6)); bh.consume(i.underlying(7)); bh.consume(i.underlying(8)); bh.consume(i.underlying(9)) }
  @Benchmark def scanLinkedHList10(bh: Blackhole)  : Unit = { val t1 = linkedHList10.tail; val t2 = t1.tail; val t3 = t2.tail; val t4 = t3.tail; val t5 = t4.tail; val t6 = t5.tail; val t7 = t6.tail; val t8 = t7.tail; val t9 = t8.tail; linkedHList10.head; bh.consume(t1.head); bh.consume(t2.head); bh.consume(t3.head); bh.consume(t4.head); bh.consume(t5.head); bh.consume(t6.head); bh.consume(t7.head); bh.consume(t8.head); bh.consume(t9.head) }
  @Benchmark def scanUnrolledHList10(bh: Blackhole): Unit = { val t1 = unrolledHList10.t; val t2 = t1.t; bh.consume(t2.e1); bh.consume(t2.e2); bh.consume(t2.e3); bh.consume(t2.e4); bh.consume(t1.e1); bh.consume(t1.e2); bh.consume(t1.e3); bh.consume(t1.e4); bh.consume(unrolledHList10.e1); bh.consume(unrolledHList10.e2) }
  @Benchmark def scanNullHList10(bh: Blackhole)    : Unit = { val i = nullHList10.asInstanceOf[NullHListImpl]; val t1 = i.t.asInstanceOf[NullHListImpl]; val t2 = t1.t.asInstanceOf[NullHListImpl]; bh.consume(i.e1); bh.consume(i.e2); bh.consume(List(t1.e1, t1.e2, t1.e3, t1.e4)); bh.consume(List(t2.e1, t2.e2, t2.e3, t2.e4)) }
}